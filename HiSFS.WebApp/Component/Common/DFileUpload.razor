@*
    - DFileUpload는 파일을 업로드하기 위한 보기 좋은 버튼을 가지고 있어야 하며, 불필요한 정보를 표현하지 않는다.
    - 버튼 방식으로 파일을 업로드 할 수 있으며 드래그&드롭으로도 업로드 할 수 있어야 한다. 그러기 위해 두가지 모드를 제공한다.
    - 파일을 업로드 했을 때 업로드한 파일이 목록에 표시 (다중목록의 경우) 되어야 하며 표시된 이후 업로드 상태가 표시되어야 한다.
*@

@using System.Threading
@using BlazorInputFile

@implements IDisposable


<div class="container-fluid">
    <div class="row-auto">
        <div class="col-auto">
            @if (IsDragAndDrop == true)
            {
                <div class="drag-drop-zone">
                    <BlazorInputFile.InputFile multiple="@IsMultiple" OnChange="OnChangeInputFileAsync" />
                    <span>@Text</span>
                </div>
                <div style="width: @($"{uploadRate}%"); height: 4px; background-color: green"></div>
            }
            else
            {
                <SfButton CssClass="dfileupload">
                    <BlazorInputFile.InputFile multiple="@IsMultiple" OnChange="OnChangeInputFileAsync" />
                    <span>@Text</span>
                </SfButton>
                <div style="width: @($"{uploadRate}%"); height: 4px; background-color: green"></div>
            }
        </div>
    </div>
</div>

@code {
    private double uploadRate = 0d;
    private CancellationTokenSource cs;

    [Parameter]
    public bool IsMultiple { get; set; }

    [Parameter]
    public bool IsDragAndDrop { get; set; }

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public IList<FileInfo> UploadedFiles { get; set; }

    [Parameter]
    public EventCallback<(FileUploadState State, FileInfo FileInfo)> OnChange { get; set; }

    public async Task OnChangeInputFileAsync(IFileListEntry[] files)
    {
        if (files == null || files.Length == 0)
            return;

        await OnChange.InvokeAsync((FileUploadState.Begin, null));

        cs = new CancellationTokenSource();
        // 복수개 파일 대상
        foreach (var file in files)
        {
            var s = file.Data;

            var targetFilename = System.IO.Path.GetTempFileName();
            using var ts = System.IO.File.OpenWrite(targetFilename);

            var fileInfo = new FileInfo
            {
                Filename = file.Name,
                Size = (int)file.Size,
                TempFilename = targetFilename
            };
            await OnChange.InvokeAsync((FileUploadState.FileUploading, fileInfo));

            var totalSize = file.Size;
            var buffer = new byte[1024 * 1024];
            while (totalSize > 0)
            {
                var nowSize = file.Size - totalSize;
                uploadRate = nowSize * 100d / file.Size;

                var readLength = await s.ReadAsync(buffer, 0, buffer.Length);
                await ts.WriteAsync(buffer, 0, readLength);
                totalSize -= readLength;
                await this.InvokeAsync(() => StateHasChanged());

                if (cs.Token.IsCancellationRequested == true)
                    break;
            }

            UploadedFiles?.Add(fileInfo);

            await OnChange.InvokeAsync((FileUploadState.FileUploadFinished, fileInfo));

            uploadRate = 0d;
            await InvokeAsync(() => StateHasChanged());
        }

        await OnChange.InvokeAsync((FileUploadState.End, null));
    }

    public enum FileUploadState
    {
        Begin,
        FileUploading,
        FileUploadFinished,
        End
    }

    public class FileInfo
    {
        public int Id { get; set; }
        public string Filename { get; set; }
        public int Size { get; set; }
        public string TempFilename { get; set; }
    }

    public void Dispose()
    {
        cs?.Cancel();
    }
}