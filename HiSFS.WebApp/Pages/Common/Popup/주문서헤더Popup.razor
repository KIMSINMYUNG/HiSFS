@page "/popup/주문서헤더"

@inherits CustomComponent


<FGrid @ref="grid" DataSource="@list" TValue="주문서헤더정보" @ondblclick="OnDbClick" DefaultMode="true" PageMode="PageMode.Popup"
       OnCreated="RefreshAsync" OnRowSelected="OnRowSelected" OnCheckAuth="CheckAuth">
    <GridColumns>
        <GridColumn Field=@nameof(주문서헤더정보.회사코드) HeaderText="회사코드" Width="110" />
        <GridColumn Field=@nameof(주문서헤더정보.주문일자) HeaderText="주문일" Width="120" />
        <GridColumn Field=@nameof(주문서헤더정보.주문번호) HeaderText="주문번호" Width="200" />
        <GridColumn Field=@nameof(주문서헤더정보.납품처명) HeaderText="납품처" Width="200" />
        <GridColumn Field=@nameof(주문서헤더정보.고객명) HeaderText="고객명" Width="120" />
        <GridColumn Field=@nameof(주문서헤더정보.과세구분명) HeaderText="과세구분명" Width="120" />
        <GridColumn Field=@nameof(주문서헤더정보.담당자명) HeaderText="담당자명" Width="100" />

    </GridColumns>
</FGrid>



@code {



    private FGrid<주문서헤더정보> grid;
    private ObservableCollection<주문서헤더정보> list;
    private 주문서헤더정보 selectedRow;

    [Parameter]
    public EventCallback<SelectedEventArgs<주문서헤더정보>> OnSelectedEvent { get; set; }


    [CascadingParameter(Name = "ReturnSelectedItem")]
    public Action<주문서헤더정보, bool> ReturnSelectedItem { get; set; }


    private async Task RefreshAsync()
    {
        list?.Clear();
        var 회사코드 = await SessionStorage.GetAsync<string>("회사코드");
        //var result = await Remote.Command.기준정보.주문서헤더정보_조회(회사코드);

        var result = await Remote.Command.기준정보.VL_MES_SO_View(회사코드);
        list = result.ToObservableCollection();

        StateHasChanged();
    }

    void OnRowSelected(RowSelectEventArgs<주문서헤더정보> args)
    {
        ReturnSelectedItem(args.Data, false);
    }

    private void OnDbClick(MouseEventArgs args)
    {
        var selectedRow = grid.Grid.SelectedRecords.FirstOrDefault();
        if (selectedRow == null)
            return;

        ReturnSelectedItem(selectedRow, true);
    }


    protected override void OnDispose()
    {
    }
}
