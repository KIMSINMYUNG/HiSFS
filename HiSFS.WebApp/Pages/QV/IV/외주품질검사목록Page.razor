@page "/dz/외주품질검사목록"
@using HiSFS.Api.Shared.Models.View_DZICUBE
@using Syncfusion.Blazor.Data

@inherits CustomComponent

<SfSplitter Width="5000px" Height="50%" Orientation="Syncfusion.Blazor.Layouts.Orientation.Horizontal" SeparatorSize="6">
    <SplitterPanes>
        <SplitterPane Size="100%" Collapsible="true">
            <SfTab CssClass="h-100" LoadOn="ContentLoad.Demand" OverflowMode="OverflowMode.Scrollable" HeaderPlacement="HeaderPosition.Top">

                <SfGrid @ref="grid" DataSource="@list">
                    <GridEditSettings AllowAdding="false" AllowDeleting="false" AllowEditing="true" Mode="Syncfusion.Blazor.Grids.EditMode.Batch"></GridEditSettings>
                    <GridEvents TValue="외주작업지시서정보" RowSelected="OnRowSelected" Created="RefreshAsync"></GridEvents>

                    <GridColumns>
                        <GridColumn Field=@nameof(외주작업지시서정보.회사코드) HeaderText="회사코드" Width="120" AllowAdding="false" AllowEditing="false" />
                        @*<GridColumn Field=@nameof(외주작업지시서정보.공정단위코드) HeaderText="공정단위코드" Width="120">
                            <Template>
                            </Template>
                            <EditTemplate>
                                <SfComboBox TValue="string" TItem="공정단위정보" Value="@(Edit_공정단위코드)" PopupWidth="300px" DataSource="@공정단위List" PopupHeight="400px" CssClass="e-multi-column" Placeholder="공정단위" AllowFiltering="true" FloatLabelType="FloatLabelType.Always">
                                    <ComboBoxEvents TValue="string" TItem="공정단위정보" ValueChange="공정단위Changed"></ComboBoxEvents>
                                    <ComboBoxTemplates TItem="공정단위정보">
                                        <HeaderTemplate>
                                            <table><tr><th class="e-text-center">공정단위코드</th><th width="100px">공정코드</th></tr></table>
                                        </HeaderTemplate>
                                        <ItemTemplate Context="anotherContext">
                                            @{
                                                var 공정단위 = (anotherContext as 공정단위정보);
                                            }
                                            <table>
                                                <tbody>
                                                    <tr>
                                                        <td>@공정단위.공정단위코드</td>
                                                        <td>@공정단위.공정코드</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </ItemTemplate>
                                    </ComboBoxTemplates>
                                    <ComboBoxFieldSettings Text="공정코드" Value="공정단위코드"></ComboBoxFieldSettings>
                                </SfComboBox>

                            </EditTemplate>
                        </GridColumn>*@
                        <GridColumn Field=@nameof(외주작업지시서정보.지시번호) HeaderText="지시번호" Width="150" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.지시일) HeaderText="지시일" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.완료일) HeaderText="완료일" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.품번) HeaderText="품번" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.품명) HeaderText="품명" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.규격) HeaderText="규격" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.관리단위) HeaderText="관리단위" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.수량) HeaderText="수량" Width="120" AllowAdding="false" AllowEditing="false" Format="G29" />
                        <GridColumn Field=@nameof(외주작업지시서정보.전개순번) HeaderText="전개순번" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.공정) HeaderText="공정" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.공정명) HeaderText="공정명" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.작업장) HeaderText="작업장" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.작업장명) HeaderText="작업장명" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.설비코드) HeaderText="설비코드" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.설비명) HeaderText="설비명" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.지시상태) HeaderText="지시상태" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.지시상태명) HeaderText="지시상태명" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.지시구분) HeaderText="지시구분" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.지시구분명) HeaderText="지시구분명" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.생산외주구분) HeaderText="생산외주구분" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.생산외주구분명) HeaderText="생산외주구분명" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.처리구분) HeaderText="처리구분" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.처리구분명) HeaderText="처리구분명" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.검사구분) HeaderText="검사구분" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.검사구분명) HeaderText="검사구분명" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.LOT번호) HeaderText="LOT번호" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.거래처코드) HeaderText="거래처코드" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.거래처명) HeaderText="거래처명" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.거래처약칭) HeaderText="거래처약칭" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.주문번호) HeaderText="주문번호" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.주문순번) HeaderText="주문순번" Width="120" AllowAdding="false" AllowEditing="false" />
                        <GridColumn Field=@nameof(외주작업지시서정보.사업장코드) HeaderText="사업장코드" Width="120" AllowAdding="false" AllowEditing="false" />
                    </GridColumns>
                </SfGrid>
            </SfTab>
        </SplitterPane>
    </SplitterPanes>
</SfSplitter>

<SfSplitter Height="30%" Width="100%" Orientation="Syncfusion.Blazor.Layouts.Orientation.Vertical" SeparatorSize="6">
    <SplitterPanes>
        <SplitterPane Size="45%" Collapsible="true">
            <HiSFS.WebApp.Pages.Common.단위 제목="검사 장비">

                @*<SfButton @onclick="@OpenDialog">Open Dialog</SfButton>*@

                <TGrid @ref="grid5" DataSource=@(list5) TValue="공정단위검사장비" EditMode="DGridEditMode.Add" DefaultMode="false"
                       OnActionBegin="OnActionBegin" OnActionComplete="OnActionComplete" OnCheckAuth="CheckAuth">
                    <GridColumns>
                        <GridColumn Field=@nameof(공정단위검사정보.No) HeaderText="순번" Width="80">
                            <EditTemplate></EditTemplate>
                        </GridColumn>
                        <GridColumn Field=@nameof(공정단위검사장비.공정단위코드) Visible="false" />
                        <GridColumn Field=@nameof(공정단위검사장비.품질검사코드) Visible="false" />
                        <GridColumn Field=@nameof(공정단위검사장비.검사장비식별번호) Width="0" IsPrimaryKey="true">
                            <Template>
                                @((context as 공정단위검사장비).검사장비?.장비명)
                            </Template>
                            <EditTemplate>
                                @{ var info = context as 공정단위검사장비; }
                                <DInputSearch ID="검사장비식별번호" Placeholder="검사장비" Target="#root" DialogHeader="검사장비 조회" TValue="연동장비정보" TCode="int?" TextField="장비명" @bind-Value=@(info.검사장비) CodeField="식별번호" @bind-Code=@(info.검사장비식별번호)>
                                    <DialogContent>
                                        <HiSFS.WebApp.Pages.Common.Popup.연동장비Popup />
                                    </DialogContent>
                                </DInputSearch>
                            </EditTemplate>
                        </GridColumn>
                        <GridColumn Field="검사장비.장비명" Width="200" HeaderText="검사장비명">
                            <EditTemplate></EditTemplate>
                        </GridColumn>
                        <GridColumn Field="검사장비.연동장비유형.코드명" Width="160" HeaderText="연동장비유형">
                            <EditTemplate></EditTemplate>
                        </GridColumn>
                        <GridColumn HeaderText="" Width="120" TextAlign="TextAlign.Right" AllowEditing="false" AllowAdding="false">
                            <Template>
                                @{ var info = context as 공정단위검사장비; }
                                <SfButton Disabled="false" @onclick=@(() => OnConnection(info, true))>연결</SfButton>
                            </Template>
                            <EditTemplate></EditTemplate>
                        </GridColumn>
                        @*<GridColumn HeaderText="장비연결" Width="120">
                                <GridCommandColumns>
                                    <GridCommandColumn Type="CommandButtonType.None" Title="장비연결"
                                                       ButtonOption="@(new CommandButtonOptions()
                                                       {
                                                           IconCss = "remove-image-icon-icon-image", Content="장비연결" ,
                                                       })" />
                                </GridCommandColumns>
                            </GridColumn>*@

                    </GridColumns>
                </TGrid>
            </HiSFS.WebApp.Pages.Common.단위>
        </SplitterPane>
    </SplitterPanes>
</SfSplitter>

<SfSplitter Height="50%" Width="100%" Orientation="Syncfusion.Blazor.Layouts.Orientation.Horizontal" SeparatorSize="6">
    <SplitterPanes>
        <SplitterPane Size="30%" Collapsible="true">
            <HiSFS.WebApp.Pages.Common.단위 제목="품목">
                @*<div class="text-right">
                        <SfButton @ref="btnTest" @onclick="@(e => OnNextTest())" IconPosition="IconPosition.Right" Content="다음측정" Disabled=@IsEnable>다음측정</SfButton>
                    </div>*@
                <SfGrid @ref="grid3" DataSource="@품질검사생산품목록" AllowSelection="true" Height="200">
                    <GridEvents RowSelected="RowSelectHandler" OnActionComplete="OnActionComplete" TValue="품질검사생산품"></GridEvents>
                    <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple" PersistSelection="true"></GridSelectionSettings>
                    <SfToolbar>
                        <ToolbarEvents Clicked="ToolbarClickHandler"></ToolbarEvents>
                        <Syncfusion.Blazor.Navigations.ToolbarItems>

                            <ToolbarItem Type="@Syncfusion.Blazor.Navigations.ItemType.Input" Align="Syncfusion.Blazor.Navigations.ItemAlign.Right">
                                <Template>
                                    <SfTextBox Width="200" @ref="@_searchBox" @bind-Value="검사수량입력" @onkeyup="@OnKeyUp" Placeholder="검사수량을 입력하세요" Enabled="@IsEnable" />
                                </Template>
                            </ToolbarItem>
                            <ToolbarItem Type="@Syncfusion.Blazor.Navigations.ItemType.Button" Align="Syncfusion.Blazor.Navigations.ItemAlign.Right" PrefixIcon="검사수량" Text="검사수량설정" Disabled="@IsBtnEnable" />
                        </Syncfusion.Blazor.Navigations.ToolbarItems>
                    </SfToolbar>
                    <GridColumns>
                        @*<GridColumn Type="ColumnType.CheckBox" AllowFiltering="false" AllowSorting="false" Width="50"></GridColumn>*@
                        <GridColumn Field=@nameof(품질검사생산품.Seq) HeaderText="SEQ" TextAlign="TextAlign.Left" Width="50" IsPrimaryKey="true"></GridColumn>
                        <GridColumn Field=@nameof(품질검사생산품.생산품공정코드) HeaderText="생산품공정코드" Width="100" HeaderTextAlign="TextAlign.Left"></GridColumn>
                        @*<GridColumn Field=@nameof(품질검사생산품.생산품공정명) HeaderText="생산품공정명" Width="100"></GridColumn>
                            <GridColumn Field=@nameof(품질검사생산품.공정단위코드) HeaderText="공정단위코드" Width="100"></GridColumn>*@
                        <GridColumn Field=@nameof(품질검사생산품.Result) HeaderText="테스트여부" Width="100"></GridColumn>
                        @*<GridColumn Field=@nameof(품질검사생산품.CheckDate) HeaderText="측정날짜" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="100"></GridColumn>*@
                    </GridColumns>
                </SfGrid>
            </HiSFS.WebApp.Pages.Common.단위>
        </SplitterPane>
        <SplitterPane Size="70%" Collapsible="true">
            <HiSFS.WebApp.Pages.Common.단위 제목="검사 항목">

                <TGrid @ref="grid4" DataSource=@(list4) TValue="공정단위검사정보" DefaultMode="false" EditMode="DGridEditMode.None" OnCheckSave="OnCheckSave " OnCheckReset="OnCheckReset"
                       QueryCellInfoHandler="QueryCellInfoHandler" OnRowDataBound="OnRowDataBound" OnActionBegin="OnActionBegin" OnActionComplete="OnActionComplete" OnCheckAuth="CheckAuth">

                    <GridColumns>
                        <GridColumn Type="ColumnType.CheckBox" AllowFiltering="false" AllowSorting="false" AllowEditing="false"
                                    AllowReordering="false" AllowAdding="false" Width="60">
                            <EditTemplate></EditTemplate>
                        </GridColumn>
                        <GridColumn Field=@nameof(공정단위검사정보.No) HeaderText="순번" Width="80" IsPrimaryKey="true">
                            <EditTemplate></EditTemplate>
                        </GridColumn>
                        <GridColumn Field=@nameof(공정단위검사정보.공정단위코드) Visible="false" />
                        <GridColumn Field=@nameof(공정단위검사정보.품질검사코드) Width="0" IsPrimaryKey="true">
                            <Template>
                                @((context as 공정단위검사정보).품질검사?.품질검사명)
                            </Template>
                            <EditTemplate>
                                @{ var info = context as 공정단위검사정보; }
                                <DInputSearch ID="품질검사코드" Placeholder="품질검사" Target="#root" DialogHeader="품질검사 조회" TValue="품질검사정보" TCode="string" TextField="품질검사명" @bind-Value=@(info.품질검사) CodeField="품질검사코드" @bind-Code=@(info.품질검사코드)>
                                    <DialogContent>
                                        <HiSFS.WebApp.Pages.Common.Popup.검사Popup />
                                    </DialogContent>
                                </DInputSearch>
                            </EditTemplate>
                        </GridColumn>
                        <GridColumn Field="품질검사.품질검사명" Width="160" HeaderText="품질검사">
                            <EditTemplate></EditTemplate>
                        </GridColumn>
                        @*<GridColumn Field=@nameof(공정단위검사정보.검사단위코드) Width="130">
                                <Template>
                                    @{ var info = context as 공정단위검사정보; }
                                    @info.검사단위?.코드명
                                </Template>
                                <EditTemplate>
                                    @{ var info = context as 공정단위검사정보; }
                                    <DCommonCodeDropList ID="검사단위코드" Placeholder="검사단위" ParentCode="B24" @bind-Value=@(info.검사단위코드) />
                                </EditTemplate>
                            </GridColumn>*@
                        <GridColumn Field="검사단위.코드명" Width="120" HeaderText="검사단위">
                            <EditTemplate></EditTemplate>
                        </GridColumn>
                        <GridColumn Field=@nameof(공정단위검사정보.검사기준값) HeaderText="검사기준값" Width="120" />
                        @*<GridColumn Field=@nameof(공정단위검사정보.오차범위) HeaderText="오차범위" Width="120" />*@
                        <GridColumn Field=@nameof(공정단위검사정보.오차범위상한) HeaderText="오차범위상한" Width="120" />
                        <GridColumn Field=@nameof(공정단위검사정보.오차범위하한) HeaderText="오차범위하한" Width="120" />
                        <GridColumn Field=@nameof(공정단위검사정보.합격여부) HeaderText="합격여부" Width="120">
                            <EditTemplate></EditTemplate>
                        </GridColumn>
                        <GridColumn Field=@nameof(공정단위검사정보.검사측정값) HeaderText="검사측정값" Width="100" Format="C2">
                            <EditTemplate></EditTemplate>
                        </GridColumn>
                    </GridColumns>
                </TGrid>
            </HiSFS.WebApp.Pages.Common.단위>
        </SplitterPane>
    </SplitterPanes>
</SfSplitter>

<HiSFS.WebApp.Pages.Common.단위 제목="바코드">
    <div class="form-row">

        <div class="form-group col-md-3">
            <div class="row mb-2">
                <span class="col text-center">
                    <SfButton @ref="btnStart" OnClick="onClickStart" Content="품질검사 시작" Disabled="@IsBtnStartEnable"></SfButton>
                </span>
            </div>
            @if (pum_barcodeStart != null)
            {
                <div class="row mb-2">
                    <div class="col text-center">
                        @*$"00 S9112 {생산지시.생산지시코드} {공정차수.생산품공정차수.공정단위.공정단위코드}"*@
                        <SfQRCodeGenerator Width="300px" Height="150px" Value=@(pum_barcodeStart)>
                            @*<QRCodeGeneratorDisplayText Visibility="true" />*@
                        </SfQRCodeGenerator>
                    </div>
                </div>
                <div class="row">
                    <div class="col text-center">
                        @*<SfButton Disabled="true">출력</SfButton>*@
                        <SfButton OnClick="() => OnQRPrinte_pum(pum_barcodeStart, 2) ">출력</SfButton>
                    </div>
                </div>
            }

        </div>
        <div class="form-group col-md-3">
            <div class="row mb-2">
                <span class="col text-center">
                    <SfButton @ref="btnEnd" OnClick="onClickEnd" Content="품질검사 종료" Disabled="@IsBtnEndEnable"></SfButton>
                </span>
            </div>
            @if (pum_barcodeEnd != null)
            {
                <div class="row mb-2">
                    <div class="col text-center">
                        @*$"00 S9113 {생산지시.생산지시코드} {공정차수.생산품공정차수.공정단위.공정단위코드}"*@
                        <SfQRCodeGenerator Width="300px" Height="150px" Value=@(pum_barcodeEnd)>
                            @*<QRCodeGeneratorDisplayText Visibility="true" />*@
                        </SfQRCodeGenerator>
                    </div>
                </div>
                <div class="row">
                    <div class="col text-center">
                        @*<SfButton Disabled="true">출력</SfButton>*@
                        <SfButton OnClick="() => OnQRPrinte_pum(pum_barcodeEnd, 2) ">출력</SfButton>
                    </div>
                </div>
            }

        </div>


        <div class="form-group col-md-3">
            <div class="row mb-2">
                <span class="col text-center">
                    <SfButton @ref="실적등록" OnClick="실적등록클릭" Content="실적등록" Disabled="false" CssClass="e-info"></SfButton>
                </span>
            </div>
            @if (실적등록바코드 != null)
            {
                <div class="row mb-2">
                    <div class="col text-center">
                        <SfQRCodeGenerator Width="300px" Height="150px" Value=@(실적등록바코드)>
                            @*<QRCodeGeneratorDisplayText Visibility="true" />*@
                        </SfQRCodeGenerator>
                    </div>
                </div>
                <div class="row">
                    <div class="col text-center">
                        @*<SfButton Disabled="true">출력</SfButton>*@
                        <SfButton OnClick="() => OnQRPrinte_pum(실적등록바코드, 2) ">출력</SfButton>
                    </div>
                </div>
            }
        </div>
    </div>
</HiSFS.WebApp.Pages.Common.단위>



<SfDialog Target="#main" Width="700px" Height="600px" IsModal="true" @bind-Visible="isDialogVisible" CloseOnEscape="true">
    <DialogTemplates>
        <Header>
            <b>생산실적등록</b>
        </Header>
        <Content>
            <div class="form-row">
                <div class="form-group col-md-4">
                    <SfTextBox ID="회사코드" Value="@(회사코드)" FloatLabelType="FloatLabelType.Always" Placeholder="회사코드" Enabled="false"></SfTextBox>

                </div>
                <div class="form-group col-md-4">
                    <SfTextBox ID="지시번호" Value="@(selectedRow?.지시번호)" FloatLabelType="FloatLabelType.Always" Placeholder="지시번호" Enabled="false"></SfTextBox>
                </div>
                <div class="form-group col-md-4">
                    @*<SfTextBox ID="공정단위코드" Value="@(selectedRow?.공정단위코드)" FloatLabelType="FloatLabelType.Always" Placeholder="공정단위코드" Enabled="false"></SfTextBox>*@
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-md-4">
                    <SfDropDownList ID="재작업여부" TItem="재작업필드" @bind-Value="@(Edit재작업필드)" TValue="string" DataSource="@list재작업여부" FloatLabelType="FloatLabelType.Always" CssClass="@Validate" Placeholder="재작업여부" Enabled="true">
                        <DropDownListFieldSettings Text="Text" Value="ID"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="form-group col-md-4">
                    <SfTextBox ID="생산품코드" Value="@(selectedRow?.품번)" FloatLabelType="FloatLabelType.Always" Placeholder="생산품코드" Enabled="false"></SfTextBox>
                </div>
                <div class="form-group col-md-4">
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-md-4">
                    <SfComboBox TValue="string" TItem="직원정보" @bind-Value="@(Edit사원코드)" PopupWidth="300px" DataSource="@직원정보List" PopupHeight="600px" CssClass="@Validate" Placeholder="사원코드" AllowFiltering="true" FloatLabelType="FloatLabelType.Always">
                        <ComboBoxTemplates TItem="직원정보">
                            <HeaderTemplate>
                                <table><tr><th class="e-text-center">사번</th><th width="100px">사용자명</th><th width="100px">부서코드</th></tr></table>
                            </HeaderTemplate>

                            <ItemTemplate Context="anotherContext">
                                @{
                                    var 직원정보 = (anotherContext as 직원정보);
                                }

                                @*<ValidationMessage For="() => 직원정보.사번" />*@
                                <table>
                                    <tbody>
                                        <tr>
                                            <td>@직원정보.사번</td>
                                            <td>@직원정보.사용자명</td>
                                            <td>@직원정보.부서코드</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </ItemTemplate>
                        </ComboBoxTemplates>
                        <ComboBoxFieldSettings Text="사용자명" Value="사번"></ComboBoxFieldSettings>
                    </SfComboBox>
                </div>
                <div class="form-group col-md-4">
                        <SfComboBox TValue="string" TItem="부서정보" @bind-Value="@(Edit부서코드)" PopupWidth="400px" DataSource="@부서정보List" PopupHeight="400px" CssClass="@Validate" Placeholder="부서코드" AllowFiltering="true" FloatLabelType="FloatLabelType.Always">
                            <ComboBoxTemplates TItem="부서정보">
                                <HeaderTemplate>
                                    <table>
                                        <tr>
                                            <th width="100px">부서코드</th>
                                            <th width="100px">부서명</th>
                                            <th width="100px">부문코드</th>
                                            <th width="100px">부문명</th>
                                        </tr>
                                    </table>

                                </HeaderTemplate>
                                <ItemTemplate Context="anotherContext">
                                    @{
                                        var 부서 = (anotherContext as 부서정보);
                                    }

                                    <table>
                                        <tbody>
                                            <tr>
                                                <td>@부서.부서코드</td>
                                                <td>@부서.부서명</td>
                                                <td>@부서.부문코드</td>
                                                <td>@부서.부문명</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </ItemTemplate>
                            </ComboBoxTemplates>
                            <ComboBoxFieldSettings Text="부서명" Value="부서코드"></ComboBoxFieldSettings>
                        </SfComboBox>

                    </div>
            </div>

            <div class="form-row">
                    <div class="form-group col-md-4">
                        <SfComboBox TValue="string" TItem="장소정보"  @bind-Value="@(Edit이동공정_입고창고코드)" PopupWidth="300px" DataSource="@실적공정코드_창고코드List" PopupHeight="400px" CssClass="@Validate" Placeholder="이동공정/입고창고코드" AllowFiltering="true" FloatLabelType="FloatLabelType.Always">
                            <ComboBoxTemplates TItem="장소정보">
                                <HeaderTemplate>
                                    <table><tr><th class="e-text-center">장소코드</th><th width="100px">장소명</th></tr></table>
                                </HeaderTemplate>
                                <ItemTemplate Context="anotherContext">
                                    @{
                                        var 장소정보 = (anotherContext as 장소정보);
                                    }
                                    <table>
                                        <tbody>
                                            <tr>
                                                <td>@장소정보.장소코드</td>
                                                <td>@장소정보.장소명</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </ItemTemplate>
                            </ComboBoxTemplates>
                            <ComboBoxFieldSettings Text="장소명" Value="장소코드"></ComboBoxFieldSettings>
                        </SfComboBox>
                    </div>
                    <div class="form-group col-md-4">
                        <SfComboBox TValue="string" TItem="장소위치정보"  @bind-Value="@(Edit이동작업장_입고장소코드)" PopupWidth="300px" DataSource="@실적공정코드_장소코드List" PopupHeight="400px" CssClass="@Validate" Placeholder="이동작업장/입고장소코드" AllowFiltering="true" FloatLabelType="FloatLabelType.Always">
                            <ComboBoxTemplates TItem="장소위치정보">
                                <HeaderTemplate>
                                    <table><tr><th class="e-text-center">위치코드</th><th width="100px">위치명</th></tr></table>
                                </HeaderTemplate>
                                <ItemTemplate Context="anotherContext">
                                    @{
                                        var 장소위치정보 = (anotherContext as 장소위치정보);
                                    }
                                    <table>
                                        <tbody>
                                            <tr>
                                                <td>@장소위치정보.위치코드</td>
                                                <td>@장소위치정보.위치명</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </ItemTemplate>
                            </ComboBoxTemplates>
                            <ComboBoxFieldSettings Text="위치명" Value="위치코드"></ComboBoxFieldSettings>
                        </SfComboBox>
                    </div>
                    <div class="form-group col-md-4">

                    </div>
                </div>


                <div class="form-row">

                    <div class="form-group col-md-4">
                        <SfDatePicker FloatLabelType="FloatLabelType.Always" TValue="DateTime?" Placeholder="실적등록일" Value="@실적등록일selected" Enabled="true">
                            <DatePickerEvents TValue="DateTime?" ValueChange="ValueChangeHandler"></DatePickerEvents>
                        </SfDatePicker>
                    </div>
                    <div class="form-group col-md-4">
                        <SfNumericTextBox FloatLabelType="FloatLabelType.Always" TValue="Decimal?" Placeholder="실적수량" Value=@(Edit실적수량) Enabled="true" />
                    </div>
                    <div class="form-group col-md-4">
                        <SfNumericTextBox FloatLabelType="FloatLabelType.Always" TValue="Decimal" Placeholder="실적불량수량" @bind-Value=@(Edit불량수량) Enabled="true" />
                    </div>

                </div>

                <div class="form-row">

                    <div class="form-group col-md-12">
                        @*<SfNumericTextBox FloatLabelType="FloatLabelType.Always" TValue="Decimal" Placeholder="사용수량" @bind-Value=@(Edit사용수량) Enabled="true" />*@

                        <SfGrid @ref="GridBom" DataSource=@listBom TValue="공정단위자재정보">
                            <GridEditSettings AllowAdding="false" AllowDeleting="false" AllowEditing="false"></GridEditSettings>
                            <GridColumns>
                                <GridColumn Field=@nameof(공정단위자재정보.공정단위코드) HeaderText="공정단위코드" Width="100" TextAlign="@TextAlign.Center" HeaderTextAlign="@TextAlign.Center" AllowAdding="false" AllowEditing="false"></GridColumn>
                                <GridColumn Field=@nameof(공정단위자재정보.자재코드) HeaderText="자재코드" IsPrimaryKey="true" Width="100" TextAlign="@TextAlign.Center" HeaderTextAlign="@TextAlign.Center" AllowAdding="false" AllowEditing="false"></GridColumn>
                                <GridColumn Field=@nameof(공정단위자재정보.수량) Width="100" HeaderText="사용수량" Format="G29"></GridColumn>
                            </GridColumns>

                        </SfGrid>
                    </div>

                </div>


                <div class="form-row">
                    <div class="form-group col-md-12">
                        <SfTextBox ID="비고" Value="@(Edit비고)" FloatLabelType="FloatLabelType.Always" Placeholder="비고" Enabled="true" Multiline="true"></SfTextBox>
                    </div>
                </div>



        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="실적등록" OnClick=@(실적등록저장) IsPrimary="true" />
        <DialogButton Content="취소" OnClick=@(() => {  isDialogVisible = false; }) />
    </DialogButtons>
</SfDialog>

<style>
    .e-checkbox-disabled .e-checkbox-wrapper .e-frame {
        border-color: #bdbdbd;
        color: red;
    }

    .e-checkbox-disabled .e-checkbox-wrapper {
        cursor: default;
        pointer-events: none;
    }
</style>

@code {
    private SfGrid<외주작업지시서정보> grid;
    private List<외주작업지시서정보> list;
    private 외주작업지시서정보 selectedRow;

    private string 회사코드 = "";


    public List<공정단위정보> 공정단위List { get; set; }

    private async Task RefreshAsync()
    {

        회사코드 = await SessionStorage.GetAsync<string>("회사코드");
        list?.Clear();

        StateHasChanged();

        //창고VIEW
        var result = await Remote.Command.기준정보.외주작업지시서입고정보_조회Dz(회사코드);

        list = result.ToList();


        var 공정단위리스트 = await Remote.Command.생산관리.공정단위_조회(회사코드);
        공정단위List = 공정단위리스트.ToList();

        StateHasChanged();
    }



    public async Task 공정단위Changed(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, 공정단위정보> args)
    {


    }

    private int checkCnt = 0;

    Dictionary<int, decimal> myValue = new Dictionary<int, decimal>();

    private Dictionary<int?, string> RowButton = new Dictionary<int?, string>();

    public int Sid = 0;


    private SfTextBox _searchBox;

    public string 검사수량입력 { get; set; }
    public int 검사수량입력_숫자 { get; set; }
    public bool IsEnable { get; set; } = true;
    public bool IsBtnEnable { get; set; } = false;

    private TGrid<공정단위검사정보> grid4;
    private ObservableCollection<공정단위검사정보> list4 = new ObservableCollection<공정단위검사정보>();
    private 공정단위검사정보 selected공정단위검사정보;

    private void OnRowDataBound(RowDataBoundEventArgs<공정단위검사정보> args)
    {
        //await Task.Yield();
        //if (args.Data.합격여부 != null)
        //{
        //    args.Row.AddClass(new string[] { "e-checkbox-disabled" });
        //}
    }



    public async Task RowSelectHandler(RowSelectEventArgs<품질검사생산품> args)
    {

        /*
        selected품질검사생산품 = args.Data;
        //var found = list4.FirstOrDefault(x => x.공정단위코드 == selected품질검사생산품.공정단위코드 );
        var result = await Remote.Command.품질관리.품질검사측정정보_조회(생산지시.생산지시코드, selected품질검사생산품.Seq);
        int i = 0;

        foreach (var item in list4)
        {
            var found = result.FirstOrDefault(x => x.품질검사코드 == list4[i].품질검사코드);

            if (found != null)
            {
                list4[i].검사측정값 = found.검사측정값; ///result.FirstOrDefault(x => x.품질검사코드 == list4[i].품질검사코드).검사측정값;
                list4[i].합격여부 = found.합격여부;//result.FirstOrDefault(x => x.품질검사코드 == list4[i].품질검사코드).합격여부;
            }
            else
            {
                list4[i].검사측정값 = null;
                list4[i].합격여부 = null;
            }
            i++;
        }
        */

    }

    private async Task OnActionComplete(ActionEventArgs<품질검사생산품> args)
    {

        //if (list3.Count > 0)
        //    await grid3.SelectRow(nowItem, true);
    }


    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {

        /*
        Console.WriteLine(검사수량입력);
        if (args.Item.Text == "검사수량설정")
        {
            if (Convert.ToInt32(검사수량입력) > 생산지시.생산수량)
                return;

            검사수량입력_숫자 = Convert.ToInt32(검사수량입력);

            var cancle = await ShowMessageBox("검사수량", "검사수량을 설정하시겠습니까?", MessageBoxResultType.YesOrNo);
            if (!cancle)
                return;

            IsEnable = false;
            IsBtnEnable = true;

            Console.WriteLine(args.Item.Text);
            list3 = Enumerable.Range(1, Convert.ToInt32(검사수량입력_숫자)).Select(cnt => new 품질검사생산품()
            {
                Seq = cnt,
                생산지시코드 = 생산지시.생산지시코드,
                생산품공정코드 = 생산지시.생산계획.생산품공정.생산품공정코드,
                생산품공정명 = 생산지시.생산계획.생산품공정.생산품공정명,
                공정단위코드 = 생산지시.생산지시공정차수목록[selected차수 - 1].생산품공정차수.공정단위코드,
                Result = "",
                보유품목코드 = 생산지시.생산계획.생산품코드,
                CheckDate = DateTime.Now.AddDays(-cnt),
            }).ToList();
            품질검사생산품목록 = new ObservableCollection<품질검사생산품>(list3);

        }
        */
    }

    public async Task OnKeyUp()
    {
        //await _grid.Search(_searchBox.Value);
    }


    private async Task OnCheckSave()
    {
        /*
        var 검사체크항목 = await grid4.Grid.GetSelectedRecords();
        var 검사항목전체 = await grid4.Grid.GetCurrentViewRecords();
        //if (검사체크항목.Count == 0)
        //{
        //    NotifyMessage(Message.SelectAlert);
        //    return;
        //}
        var userId = await SessionStorage.GetAsync<string>("userId");

        if (!btnStartFlag)
        {
            ShowMessageBox(userId, "품질검사를 시작해주세요.", MessageBoxResultType.Okay);
            return;
        }
        Console.WriteLine(btnStartFlag);

        var save = await ShowMessageBox("측정저장", "측정을 저장하시겠습니까?", MessageBoxResultType.YesOrNo);
        if (!save)
            return;
        if (save == true && 검사체크항목.Count == 0)
        {
            NotifyMessage(Message.SelectAlert);
            return;
        }

        List<품질검사생산품> 품목 = await grid3.GetCurrentViewRecords();
        foreach (var item in 검사체크항목)
        {
            if (item.검사측정값 == null)
            {
                ShowMessageBox(userId, "측정데이터가  업습니다.", MessageBoxResultType.Okay);
                return;
            }
        }
        try
        {

            //await Remote.Command.공통.포인트_저장("20062901", "KMFA-518986:1:1", 생산지시.생산지시코드


            int nowPoint = await Remote.Command.공통.포인트_조회(userId, 생산지시.생산계획.생산품공정코드, 생산지시.생산지시코드, 회사코드);

            Console.WriteLine("saveStart_nowPoint --> " + nowPoint);
            Console.WriteLine("saveStart_nowItem --> " + nowItem);
            nowItem = nowPoint;
            if (nowItem < 품목.Count() && nowItem > -1)
            {
                string[] testResultArayy = new string[검사체크항목.Count];
                string[] testResultArayy2 = new string[검사체크항목.Count];
                int i = 0;
                foreach (var 측정 in 검사체크항목)
                {
                    품질검사측정정보 측정정보 = new 품질검사측정정보();
                    측정정보.시리얼넘버 = 품목[nowItem].Seq;
                    측정정보.생산지시코드 = 품목[nowItem].생산지시코드;
                    측정정보.공정단위코드 = 측정.공정단위코드;
                    측정정보.품질검사코드 = 측정.품질검사코드;                   //"Q000001";
                    측정정보.검사단위코드 = 측정.검사단위코드;                   //"B2401";
                    측정정보.생산품공정코드 = 품목[nowItem].생산품공정코드;         //"KMFA-518986:1";
                    측정정보.생산품공정명 = 품목[nowItem].생산품공정명;     // "테스트 생산품공정"
                    측정정보.검사기준값 = 측정.검사기준값;
                    측정정보.오차범위 = 측정.오차범위;
                    측정정보.검사측정값 = 측정.검사측정값;
                    측정정보.합격여부 = 측정.합격여부;
                    측정정보.보유품목코드 = 생산품코드;
                    측정정보.회사코드 = 회사코드;

                    var result = await Remote.Command.품질관리.품질검사측정정보유무_조회(품목[nowItem].Seq, 측정정보);

                    if (result != null)
                        측정정보.RowVersion = result.RowVersion;


                    if (측정.검사측정값 != null)
                    {
                        bool multiChk = await Remote.Command.품질관리.품질검사측정정보_저장(측정정보, result == null ? true : false);
                        if (!multiChk)
                            throw new Exception("이미처리되었습니다.");
                        //일련번호생성
                        //await Remote.Command.품질관리.품질검사측정_보유품목일련정보_저장(생산품코드, 품목[nowItem].Seq);

                        //var 검사카운트 = 품질검사목록.GroupBy(x => x.시리얼넘버 == 품목[nowItem].Seq).FirstOrDefault().Count();
                        //if (품질검사목록.Count() == (검사항목전체.Count() * Convert.ToInt32(생산지시.생산수량)))

                        var 품질검사목록 = await Remote.Command.품질관리.품질검사측정완료유무_조회(생산지시.생산지시코드, 회사코드);
                        var 검사카운트 = 품질검사목록.Where(x => x.시리얼넘버 == 품목[nowItem].Seq).GroupBy(x => x.시리얼넘버).FirstOrDefault().Count();
                        //.Select(g => new { Name = g.Key, Speed = g.Min(l => l.Speed) });

                        if (검사카운트 == 검사항목전체.Count())
                            testResultArayy[i] = "완료";
                        else
                            testResultArayy[i] = "진행중";
                    }
                    else
                    {
                        testResultArayy[i] = "";
                    }

                    testResultArayy2[i] = 측정.합격여부;

                    i++;
                }
                string strResult;
                string strResult2 = string.Empty;
                if (testResultArayy.Any(c => c.Contains("진행중")) || testResultArayy.Any(c => c.Contains("완료")))
                {

                    strResult = testResultArayy.Any(c => c.Contains("완료")) ? "완료" : "진행중";

                    if (testResultArayy2.Any(c => c.Contains("불합격")))
                        strResult2 = "불합격";
                    else
                        strResult2 = "합격";
                }

                else
                    strResult = "패스";

                var foundItem = 품질검사생산품목록.FirstOrDefault(c => c.Seq == 품목[nowItem].Seq);
                foundItem.Result = strResult;

                //캐시 리플레쉬
                //list_Cache.Add(new 품질검사측정정보 { 시리얼넘버 = 품목[nowItem].Seq, 합격여부 = strResult });
                //Cache.ModifyCheckItem(list_Cache);


                //생산지시정보 검사수량,합격수량,불량수량 업데이트



                if (strResult.Equals("완료"))
                {
                    await Remote.Command.품질관리.품질검사측정_생산지시측정수량_저장(품목[nowItem].생산지시코드, strResult2);
                    //await Remote.Command.품질관리.품질검사측정_보유품목코드_저장(생산품코드, 생산지시.생산계획.생산품.품목구분코드, 품목[nowItem].Seq);

                }


                nowItem++;

                //btnSave.Disabled = true;
                var SelectedRecords = await grid4.Grid.GetSelectedRecords();

                foreach (var item in SelectedRecords)
                {
                    var found = list4.FirstOrDefault(c => c.품질검사코드 == item.품질검사코드);
                    found.검사측정값 = null;
                    found.합격여부 = null;
                }

                checkCnt = 0;
                myValue.Clear();

                NotifyMessage(Message.CheckDataSave);
                NotifyGlobalMessage(Services.Message.ChangeCheckState);


                Console.WriteLine("saveEND_nowPoint --> " + nowPoint);
                Console.WriteLine("saveEND_nowItem --> " + nowItem);
                if (품목.Count() == nowItem)
                {
                    //IsEnable = false;
                    //보유품목코드 저장

                    await Remote.Command.공통.포인트_설정(userId, 생산지시.생산계획.생산품공정코드, -1, 0);
                    //ShowMessageBox(userId, "측정이 끝났습니다.다음측정을 선택하세요.", MessageBoxResultType.Okay);
                }
                else
                {
                    //await grid3.SelectRow(nowItem, true);
                }

            }
        }
        catch (Exception ex)
        {
            NotifyMessage(Message.CheckDataSaveErorr);
            //await JSRuntime.InvokeAsync<bool>("alert", "오류입니다.");
        }

        */

    }


    private async Task OnCheckReset()
    {

        var cancle = await ShowMessageBox("측정저장", "측정을 리셋하시겠습니까?", MessageBoxResultType.YesOrNo);
        if (!cancle)
            return;

        var SelectedRecords = await grid4.Grid.GetSelectedRecords();

        foreach (var item in SelectedRecords)
        {
            var found = list4.FirstOrDefault(c => c.품질검사코드 == item.품질검사코드);
            found.검사측정값 = null;
            found.합격여부 = null;
        }
        checkCnt = 0;
        myValue.Clear();

        NotifyMessage(Message.CheckDataReset);
    }


    private void OnActionBegin(ActionEventArgs<공정단위검사정보> args)
    {
        //await Task.Yield();
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
        }
    }

    private async Task OnActionComplete(ActionEventArgs<공정단위검사정보> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            //state = "BeginEdit";
        }
        // 삭제 처리
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            await Remote.Command.생산관리.공정단위검사_삭제(args.Data, true);

            await RefreshAsync();

            NotifyMessage(Message.ModifiedDeleteData);
        }
        // 저장 관련 처리
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            var newData = args.Data;

            await Remote.Command.생산관리.공정단위검사_저장(newData, args.Action == "Add" ? true : false);
            if (args.Action == "Add")
                await RefreshAsync();

            ModifyList(list4, (info, map) =>
            {
                if (info.검사단위코드 != null)
                    info.검사단위 = map[info.검사단위코드];
            }, false);

            NotifyMessage(args.Action == "Add" ? Message.ModifiedAddData : Message.ModifiedUpdateData);
        }
    }


    protected SfButton btnStart, btnEnd, btnProcStart, btnProcEnd, btnSystem;
    protected bool btnStartFlag = false;
    public bool IsBtnStartEnable { get; set; } = false;
    public bool IsBtnEndEnable { get; set; } = false;

    private string pum_barcodeStart;
    private string pum_barcodeEnd;

    #region  품질검사
    //품질검사 시작
    private async Task onClickStart()
    {
        var 검사항목수 = await grid4.Grid.GetCurrentViewRecords();
        if (btnStartFlag == false)
        {
            btnStartFlag = true;
            IsBtnStartEnable = true;
            IsBtnEndEnable = false;
            //btnStart.Disabled = true;
            //btnEnd.Disabled = false;
            var userId = await SessionStorage.GetAsync<string>("userId");
            //await Remote.Command.공통.포인트_저장(userId, 생산지시.생산계획.생산품공정코드, Convert.ToInt32(생산지시.생산수량), 검사항목수.Count);
            //await Remote.Command.공통.포인트_저장2(userId, 생산지시.생산계획.생산품공정코드, Convert.ToInt32(생산지시.생산수량), 검사항목수.Count);

            // await Remote.Command.품질관리.품질검사시작_보유품목코드_저장(생산품코드, 생산지시.생산계획.생산품.품목구분코드, Convert.ToInt32(생산지시.생산수량), 회사코드);

            /* 보유품목 다시 정의  20210513

            await Remote.Command.품질관리.보유품목일지_저장(생산지시.생산계획.생산품코드, Convert.ToInt32(생산지시.생산수량), 생산지시.생산지시코드);
            await Remote.Command.품질관리.품질검사측정_보유품목일련번호생성_저장(생산지시.생산지시코드, 생산지시.생산계획.생산품코드, Convert.ToInt32(생산지시.생산수량));
            */

            NotifyMessage(Message.CheckStart);
        }

    }
    //품질검사 종료
    private async Task onClickEnd()
    {
        if (btnStartFlag == true)
        {
            btnStartFlag = false;

            IsBtnStartEnable = false;
            IsBtnEndEnable = true;
            //this.btnStart.Disabled = false;
            //btnEnd.Disabled = true;
            var userId = await SessionStorage.GetAsync<string>("userId");
            //bool nowPoint = await Remote.Command.공통.포인트_삭제(userId, 생산지시.생산계획.생산품공정코드);

            NotifyMessage(Message.CheckEnd);
        }
    }
    #endregion


    private SfGrid<공정단위자재정보> GridBom;
    private List<공정단위자재정보> listBom = new List<공정단위자재정보>();


    #region 실적등록
    public class 재작업필드
    {
        public int ID { get; set; }
        public string Text { get; set; }
    }
    public List<재작업필드> list재작업여부 = new List<재작업필드>() {
        new 재작업필드(){ ID=0, Text="정상작업"},
        new 재작업필드(){ ID=1, Text="재작업"},
    };

    public SfButton 실적등록;
    private string 실적등록바코드;

    public Query Query;
    public Query Query2;

    public List<직원정보> 직원정보List { get; set; }
    public List<부서정보> 부서정보List { get; set; }

    public List<장소정보> 실적공정코드_창고코드List { get; set; }
    public List<장소위치정보> 실적공정코드_장소코드List { get; set; }

    public string Edit사원코드 = "";
    public string Edit부서코드 = "";
    public string Edit이동공정_입고창고코드 = "";
    public string Edit이동작업장_입고장소코드 = "";
    public string Edit재작업필드 = "";
    public decimal Edit실적수량 = 0;
    public decimal Edit사용수량 = 0;
    public decimal Edit불량수량 = 0;
    public string Edit비고 = "";

    private string Edit_공정단위코드;
    private string Edit_지시번호;

    public string Validate = "e-multi-column";

    private bool isDialogVisible;
    private async Task 실적등록저장()
    {
        string lotNo = await OnQRPrinte(4, Edit실적수량, selectedRow.품번);
        await Task.Delay(1000);
        isDialogVisible = true;

        if (Edit사원코드 == "" || Edit부서코드 == "" || Edit이동공정_입고창고코드 == "" || Edit이동작업장_입고장소코드 == "" || Edit재작업필드 == "")
        {
            this.Validate = "e-error e-multi-column";
            StateHasChanged();
            return;

        }

        var 작업외주생산실적 = new 작업외주생산실적등록정보
        {
            회사코드 = 회사코드,
            부서코드 = Edit부서코드,
            사원코드 = Edit사원코드,
            사업장코드 = "1000",
            작업일자 = DateTime.Now,
            실적일자 = 실적등록일selected,

            지시번호 = selectedRow.지시번호,
            지시전개순번 = selectedRow.전개순번,
            실적수량 = Edit실적수량,
            처리구분 = "1", //입고
            이동공정_입고창고코드 = Edit이동공정_입고창고코드, //입고시 처리
            이동작업장_입고장소코드 = Edit이동작업장_입고장소코드, //입고시처리
            검사구분 = selectedRow.검사구분,
            재작업여부 = Edit재작업필드,
            실적구분 = "0",
            LOT번호 = lotNo,

        };

        try
        {
            //var 보유품목 = await Remote.Command.기준정보.외주제품입고처리_등록(작업외주생산실적, selectedRow);

            //var 보유품목위치 = await Remote.Command.기준정보.외주제품_위치등록(작업외주생산실적, selectedRow);

            //bool result = await Remote.Command.기준정보.MES생산실적_작업외주생산실적등록정보_등록(작업외주생산실적, true);

            bool result = false;
            if (!result)
            {
                NotifyMessage(Message.반영실패);
                isDialogVisible = false;
                return;
            }
        }
        catch (Exception ex)
        {

        }



        NotifyMessage(Message.반영성공);

        Edit사원코드 = "";
        Edit부서코드 = "";
        Edit이동공정_입고창고코드 = "";
        Edit이동작업장_입고장소코드 = "";
        Edit재작업필드 = "";
        Edit실적수량 = 0;
        Edit사용수량 = 0;
        Edit불량수량 = 0;
        Edit비고 = "";
        실적등록일selected = DateTime.Now;

        isDialogVisible = false;

        this.Validate = "e-multi-column";

    }


    private string barcodeValue;

    private string barcodeValueLOT = null;

    private async Task<string> OnQRPrinte(int type,decimal _수량, string 품목코드   )
    {
        string lotNo = "";
        var sawon = await SessionStorage.GetAsync<string>("userId");


        //var YesOrNo = await ShowMessageBox("LOT번호발급", "LOT번호를 발급하시겠습니까?", MessageBoxResultType.YesOrNo);

        bool YesOrNo = true;

        var 수량 = Convert.ToInt32(Convert.ToInt32(_수량)).ToString();

        if (YesOrNo)
        {
            //lotNo = await Remote.Command.자재관리.품목코드_NOT바코드발급(품목코드, 회사코드, 수량, sawon, YesOrNo);
            // 생산2, 외주1, 원자재0
            lotNo = await Remote.Command.자재관리.품목코드_바코드발급(품목코드, 회사코드, 수량, sawon, YesOrNo, "1");
        }

        barcodeValueLOT = barcodeValue + ':' + lotNo;

        // StateHasChanged();

        //await Task.Delay(1000);

        //await QRPrinte_바코드Act(barcodeValueLOT, 수량, 2);

        //NotifyMessage(Message.반영성공);

        return lotNo;

    }

    private DateTime 실적등록일selected { get; set; } = DateTime.Now;

    public void ValueChangeHandler(ChangedEventArgs<DateTime?> args)
    {
        // Here you can customize your code
        실적등록일selected = new(args.Value.Value.Year, args.Value.Value.Month, args.Value.Value.Day);
    }

    private async Task 실적등록클릭()
    {
        if (selectedRow == null)
            return;
        await Task.Delay(1000);
        isDialogVisible = true;

        var result = await this.Remote.Command.기준정보.직원_조회(true, 회사코드);
        직원정보List = result.ToList();

        var result2 = await Remote.Command.기준정보.부서정보_조회(회사코드);
        부서정보List = result2.ToList();


        var result3 = await Remote.Command.기준정보.장소_조회(회사코드);
        실적공정코드_창고코드List = result3.ToList();


        var result4 = await Remote.Command.기준정보.장소위치_조회(회사코드);
        실적공정코드_장소코드List = result4.ToList();

        Query = new Query().Select(new List<string> { "장소코드" }).Where("장소코드", "equal", "2000");
        Query2 = new Query().Select(new List<string> { "위치코드" }).Where("위치코드", "equal", "2001");

        //var 공정단위자재목록 = await Remote.Command.기준정보.공정단위자재정보_조회(회사코드, 공정단위코드);
        //listBom?.Clear();
        //listBom = 공정단위자재목록.ToList();
        //var 공정단위자재목록 = await Remote.Command.기준정보.공정단위자재현황_조회(회사코드, 공정단위코드);

        //Edit재작업필드 = 생산지시.재작업여부;

    }


    #endregion


    private async Task OnQRPrinte_pum(string _type, int size)
    {
        var barcodeValue = _type;
        await QRPrinte_Act(barcodeValue, size);
    }


    protected override void OnDispose()
    {

    }
}
