@page "/Login"

@inherits CustomComponent

@inject NavigationManager NavigationManager;

<SfDialog Target="#main" Width="350px" Heigh="450px" IsModal="true" @bind-Visible="Visibility" CloseOnEscape="false">
    <DialogTemplates>
        <Header>
            <b>일진저스템 제조실행 시스템</b>
        </Header>
        <Content>
            <div class="container-fluid">
                <div class="row">
                    <div class="col-auto mx-auto mb-4">
                        @*유니비스로고*@
                        @*<img src="images/UNI_logo.png" style="width: auto; height: 120px;">*@
                        @*<img src="images/CI_hongikIT.png" style="width: auto; height: 50px;" />*@

                        @*일진저스템로고*@
                        <img src="images/logo.png" style="width: auto; height: 120px;" />
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col">

                        @*<SfComboBox Placeholder="회사코드" Value="@회사코드" DataSource="@listState" Index="1">
                                <ComboBoxFieldSettings Value="2265" Text="일반모드"></ComboBoxFieldSettings>
                                <ComboBoxFieldSettings Value="9998" Text="테스트모드"></ComboBoxFieldSettings>
                            </SfComboBox>*@

                        <SfDropDownList ID="회사코드" Placeholder="회사코드" TItem="회사코드필드" TValue="string" @bind-Value="@(회사코드)" DataSource="@list회사코드" FloatLabelType="FloatLabelType.Always">
                            @*<DropDownListEvents TValue="string" TItem="string" ValueChange="ValueChange"></DropDownListEvents>*@
                            <DropDownListFieldSettings Text="Text" Value="ID"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>

                <div class="row mb-2">
                    <div class="col">
                        <SfTextBox Placeholder="사번" FloatLabelType="FloatLabelType.Auto" @bind-Value="userId" />
                    </div>
                </div>
                <div class="row mb-4">
                    <div class="col">
                        <SfTextBox @ref="passwordTextBox" Placeholder="암호" Type="Syncfusion.Blazor.Inputs.InputType.Password" @bind-Value="password" FloatLabelType="FloatLabelType.Auto" />
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col">
                        <SfCheckBox Label="사번 기억" TChecked="bool" @onchange="OnChangedRememberId" @bind-Checked="isRememberId" />
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <span>@resultMessage</span>
                    </div>
                </div>
            </div>
        </Content>
    </DialogTemplates>
    <DialogEvents Opened="DialogOpen" Closed="@DialogClose"></DialogEvents>
    <DialogButtons>
        <DialogButton Content="로그인" OnClick="@OnLogin" IsPrimary="true">
            @*<DialogButtonModel Content="<a id='newTab' href='https://www.syncfusion.com/company/about-us' target='_blank'>Learn More</a>" IsPrimary="true"></DialogButtonModel>*@
        </DialogButton>
    </DialogButtons>
</SfDialog>

@code {
    private SfTextBox passwordTextBox;

    private bool isRememberId;
    private string userId;
    private string password;
    private string resultMessage;

    public string 회사코드 = "";

    public bool Visibility { get; set; } = true;

    public List<string> listState = new List<string>() { "일반모드", "테스트모드" };

    public class 회사코드필드
    {
        public string ID { get; set; }
        public string Text { get; set; }
    }
    public List<회사코드필드>
        list회사코드 = new List<회사코드필드>() {
        new 회사코드필드(){ ID="2265", Text="일반모드"},
        new 회사코드필드(){ ID="9998", Text="테스트모드"},
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender == true)
        {
            //isRememberId = await LocalStorage.GetAsync<bool>("IsRememberId");
            //if (isRememberId == true)
            //    userId = await LocalStorage.GetAsync<string>("UserId");

            // 개발용. 자동 로그인 {{{
            //userId = "SYSTEM";
            //password = "SYSTEM";
            //await OnLogin();
            // }}}
        }
    }

    private async Task OnChangedRememberId()
    {
        await LocalStorage.SetAsync("IsRememberId", isRememberId);
    }

    private void DialogOpen(Syncfusion.Blazor.Popups.OpenEventArgs args)
    {
        if (string.IsNullOrEmpty(userId) == false)
        {
            //args.PreventFocus = true;
            //await passwordTextBox.FocusIn();
        }
    }

    private void DialogClose(Object args)
    {
    }

    private async Task OnLogin()
    {
        if (isRememberId == true)
            await LocalStorage.SetAsync("UserId", userId);

        if (회사코드 == null)
            return;

        if (회사코드.Equals("2265"))
            회사코드 = "2265";
        else
            회사코드 = "9998";



        var result = await Remote.Command.공통.직원_인증(userId, password, 회사코드);
        if (result.Item1 == default)
        {
            resultMessage = result.Item2;
            return;
        }


        resultMessage = "";

        Context.직원 = result.Item1;

        await SessionStorage.SetAsync("isLogin", true);
        await SessionStorage.SetAsync("userId", Context.직원.사번);
        await SessionStorage.SetAsync("회사코드", Context.직원.회사코드);

        NotifyMessage(Message.Login);

        NavigationManager.NavigateTo("/", false);
    }

    protected override void OnDispose()
    {
    }
}