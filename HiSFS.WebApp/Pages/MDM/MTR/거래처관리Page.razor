@page "/mdm/mtr/거래처관리"
@inherits CustomComponent

<style>
    .showhide {
        font-size: 11px;
        font-weight: 200;
    }

    .e-mastertext {
        font-size: 11px;
        font-family: Roboto;
        opacity: 0.87;
        padding: 1em;
    }
</style>

<div>
    <label class="showhide text-light" style="padding: 10px 5px 10px 5px"> 회사코드 </label>
    <SfSwitch ValueChange="@((Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args) => { change("회사코드", args); })" @bind-Checked="@Check1" TChecked="bool"></SfSwitch>
    <label class="showhide text-light" style="padding: 10px 5px 10px 20px"> 거래처코드 </label>
    <SfSwitch ValueChange="@((Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args) => { change("거래처코드", args); })" @bind-Checked="@Check2" TChecked="bool"></SfSwitch>
    <label class="showhide text-light" style="padding: 10px 5px 10px 20px"> 거래처명 </label>
    <SfSwitch ValueChange="@((Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args) => { change("거래처명", args); })" @bind-Checked="@Check3" TChecked="bool"></SfSwitch>
</div>

<SfSplitter  Width="100%" Orientation="Syncfusion.Blazor.Layouts.Orientation.Horizontal" SeparatorSize="2">
    <SplitterPanes>
        <SplitterPane Size="100%" >

            <FGrid @ref="grid" DataSource="@list" TValue="거래처정보" DefaultMode="true" EditMode="DGridEditMode.None" PageSize="18"
                   OnCreated="RefreshAsync" OnActionComplete="OnActionComplete" OnCheckAuth="CheckAuth">
                <GridColumns>
                    <GridColumn Field=@nameof(거래처정보.회사코드) Width="120" />
                    <GridColumn Field=@nameof(거래처정보.거래처코드) Width="130" />
                    <GridColumn Field=@nameof(거래처정보.거래처명) Width="200" />
                    <GridColumn Field=@nameof(거래처정보.거래처약칭) Width="160" />
                    <GridColumn Field=@nameof(거래처정보.거래처구분코드) HeaderText="구분" Width="0">
                        <Template>
                            @{var info = context as 거래처정보;}
                            <span>@(info.거래처구분코드 != null ? 코드[info.거래처구분코드].코드명 : "")</span>
                        </Template>
                        <EditTemplate>
                            @{var info = context as 거래처정보;}
                            <DCommonCodeDropList ID="거래처구분코드" ParentCode="B03" Placeholder="구분" @bind-Value=@(info.거래처구분코드) />
                        </EditTemplate>
                    </GridColumn>
                    <GridColumn Field="거래처구분.코드명" Width="120" HeaderText="구분" />
                    <GridColumn Field=@nameof(거래처정보.등록번호) Width="150" HeaderText="사업자등록번호" />
                    <GridColumn Field=@nameof(거래처정보.담당자) Width="120" HeaderText="대표자명" />
                    <GridColumn Field=@nameof(거래처정보.업태) Width="100" HeaderText="업태" />
                    <GridColumn Field=@nameof(거래처정보.종목) Width="100" HeaderText="종목" />
                    <GridColumn Field=@nameof(거래처정보.주소) Width="200" HeaderText="주소" />
                    <GridColumn Field=@nameof(거래처정보.CreateTime) Format="yyyy/MM/dd" Width="120" HeaderText="등록일" />
                  
                </GridColumns>
            </FGrid>
        </SplitterPane>
    </SplitterPanes>
</SfSplitter>

@code {
    private FGrid<거래처정보> grid;
    private ObservableCollection<거래처정보> list;

    Boolean Check1 = true, Check2 = true, Check3 = true;

    public void change(string name, Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        if (args.Checked)
        {
            this.grid.Grid.ShowColumns(name);
        }
        else
        {
            this.grid.Grid.HideColumns(name);
        }
    }

    private async Task RefreshAsync()
    {
        list = null;
        StateHasChanged();

        var 회사코드 = await SessionStorage.GetAsync<string>("회사코드");
        var result = await Remote.Command.기준정보.거래처_조회(회사코드);
        ModifyList(result, (info, map) =>
        {
            if (info.거래처구분코드 != null)
                info.거래처구분 = map[info.거래처구분코드];
        });

        list = result.ToObservableCollection();
        StateHasChanged();
    }

    private async Task OnActionComplete(ActionEventArgs<거래처정보> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            //state = "Add";
        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            //state = "BeginEdit";
        }
        // 삭제 처리
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            //state = "delete";

            await Remote.Command.기준정보.거래처_삭제(args.Data, false);

            NotifyMessage(Message.ModifiedDeleteData);
        }
        // 저장 관련 처리
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            //state = "save";

            await Remote.Command.기준정보.거래처_저장(args.Data, args.Action == "Add" ? true : false);

            await RefreshAsync();

            NotifyMessage(args.Action == "Add" ? Message.ModifiedAddData : Message.ModifiedUpdateData);
        }
    }

    protected override void OnDispose()
    {
    }
}
